From: Shinjo Park <pshinjo@sec.t-labs.tu-berlin.de>
Date: Mon, 25 Apr 2016 11:37:55 +0200
Subject: [PATCH] Replace PolarSSL with mbed TLS, as upstream changed the name.

Bug: currently PolarSSL does not provide pkg-config, and upstream is
aware of this issue. As a result, FindMbedTLS.cmake is not using
pkg-config right now, and could be fixed after mbed TLS provides
pkg-config file.

See: https://github.com/ARMmbed/mbedtls/issues/228
---
 CMakeLists.txt                   |  2 +-
 LTE_fdd_enodeb/CMakeLists.txt    |  2 +-
 README                           |  2 +-
 cmake/Modules/FindMbedTLS.cmake  | 45 ++++++++++++++++++++++++++++++++++++++++
 cmake/Modules/FindPolarssl.cmake | 32 ----------------------------
 liblte/src/liblte_security.cc    | 44 +++++++++++++++++++--------------------
 6 files changed, 70 insertions(+), 57 deletions(-)
 create mode 100644 cmake/Modules/FindMbedTLS.cmake
 delete mode 100644 cmake/Modules/FindPolarssl.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 74782ab..5ef3562 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -93,7 +93,7 @@ find_package(Gnuradio "3.7.0")
 find_package(GnuradioOsmosdr)
 find_package(Uhd)
 find_package(FFTW3F)
-find_package(Polarssl)
+find_package(MbedTLS)
 
 if(NOT GNURADIO_RUNTIME_FOUND)
     message(FATAL_ERROR "GNURadio required to compile openLTE")
diff --git a/LTE_fdd_enodeb/CMakeLists.txt b/LTE_fdd_enodeb/CMakeLists.txt
index 7593d89..b9c9563 100644
--- a/LTE_fdd_enodeb/CMakeLists.txt
+++ b/LTE_fdd_enodeb/CMakeLists.txt
@@ -24,7 +24,7 @@ add_executable(LTE_fdd_enodeb
   src/LTE_fdd_enb_mme.cc
   src/LTE_fdd_enb_gw.cc
 )
-target_link_libraries(LTE_fdd_enodeb lte fftw3f tools pthread rt ${POLARSSL_LIBRARIES} ${UHD_LIBRARIES} ${Boost_LIBRARIES} ${GNURADIO_RUNTIME_LIBRARIES} ${GNURADIO_PMT_LIBRARIES})
+target_link_libraries(LTE_fdd_enodeb lte fftw3f tools pthread rt ${MBEDTLS_LIBRARIES} ${UHD_LIBRARIES} ${Boost_LIBRARIES} ${GNURADIO_RUNTIME_LIBRARIES} ${GNURADIO_PMT_LIBRARIES})
 install(TARGETS LTE_fdd_enodeb DESTINATION bin)
 install(CODE "execute_process(COMMAND chmod +x \"${CMAKE_SOURCE_DIR}/enodeb_nat_script.sh\")")
 install(CODE "execute_process(COMMAND \"${CMAKE_SOURCE_DIR}/enodeb_nat_script.sh\")")
diff --git a/README b/README
index 169e9ad..25f61fb 100644
--- a/README
+++ b/README
@@ -25,7 +25,7 @@ openLTE is dependant on the following:
 4) UHD
 5) HackRF
 6) bladeRF
-7) polarssl
+7) mbed TLS (previously polarssl)
 8) iptables
 
 To build the C++ and python code use the following:
diff --git a/cmake/Modules/FindMbedTLS.cmake b/cmake/Modules/FindMbedTLS.cmake
new file mode 100644
index 0000000..3391c62
--- /dev/null
+++ b/cmake/Modules/FindMbedTLS.cmake
@@ -0,0 +1,45 @@
+FIND_PATH(
+    MBEDTLS_INCLUDE_DIR
+    NAMES mbedtls/version.h
+    HINTS $ENV{MBEDTLS_DIR}/include
+        ${PC_MBEDTLS_INCLUDEDIR}
+        ${CMAKE_INSTALL_PREFIX}/include
+    PATHS /usr/local/include
+          /usr/include
+)
+
+FIND_LIBRARY(
+    MBEDTLS_LIBRARY
+    NAMES mbedtls
+    HINTS $ENV{MBEDTLS_DIR}/lib
+        ${PC_MBEDTLS_LIBDIR}
+        ${CMAKE_INSTALL_PREFIX}/lib
+        ${CMAKE_INSTALL_PREFIX}/lib64
+    PATHS /usr/local/lib
+          /usr/local/lib64
+          /usr/lib
+          /usr/lib64
+)
+
+FIND_LIBRARY(
+    MBEDCRYPTO_LIBRARY
+    NAMES mbedcrypto
+    HINTS $ENV{MBEDTLS_DIR}/lib
+        ${PC_MBEDTLS_LIBDIR}
+        ${CMAKE_INSTALL_PREFIX}/lib
+        ${CMAKE_INSTALL_PREFIX}/lib64
+    PATHS /usr/local/lib
+          /usr/local/lib64
+          /usr/lib
+          /usr/lib64
+)
+
+set(MBEDTLS_INCLUDE_DIRS ${MBEDTLS_INCLUDE_DIR})
+set(MBEDTLS_LIBRARIES ${MBEDTLS_LIBRARY} ${MBEDCRYPTO_LIBRARY})
+
+message(STATUS "MBEDTLS LIBRARIES " ${MBEDTLS_LIBRARIES})
+message(STATUS "MBEDTLS INCLUDE DIRS " ${MBEDTLS_INCLUDE_DIRS})
+
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(MBEDTLS DEFAULT_MSG MBEDTLS_LIBRARY MBEDCRYPTO_LIBRARY MBEDTLS_INCLUDE_DIR)
+MARK_AS_ADVANCED(MBEDTLS_LIBRARY MBEDCRYPTO_LIBRARY MBEDTLS_INCLUDE_DIRS)
diff --git a/cmake/Modules/FindPolarssl.cmake b/cmake/Modules/FindPolarssl.cmake
deleted file mode 100644
index 40f1f7b..0000000
--- a/cmake/Modules/FindPolarssl.cmake
+++ /dev/null
@@ -1,32 +0,0 @@
-INCLUDE(FindPkgConfig)
-PKG_CHECK_MODULES(PC_POLARSSL polarssl)
-
-FIND_PATH(
-    POLARSSL_INCLUDE_DIRS
-    NAMES polarssl/version.h
-    HINTS $ENV{POLARSSL_DIR}/include
-        ${PC_POLARSSL_INCLUDEDIR}
-        ${CMAKE_INSTALL_PREFIX}/include
-    PATHS /usr/local/include
-          /usr/include
-)
-
-FIND_LIBRARY(
-    POLARSSL_LIBRARIES
-    NAMES polarssl
-    HINTS $ENV{POLARSSL_DIR}/lib
-        ${PC_POLARSSL_LIBDIR}
-        ${CMAKE_INSTALL_PREFIX}/lib
-        ${CMAKE_INSTALL_PREFIX}/lib64
-    PATHS /usr/local/lib
-          /usr/local/lib64
-          /usr/lib
-          /usr/lib64
-)
-
-message(STATUS "POLARSSL LIBRARIES " ${POLARSSL_LIBRARIES})
-message(STATUS "POLARSSL INCLUDE DIRS " ${POLARSSL_INCLUDE_DIRS})
-
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(POLARSSL DEFAULT_MSG POLARSSL_LIBRARIES POLARSSL_INCLUDE_DIRS)
-MARK_AS_ADVANCED(POLARSSL_LIBRARIES POLARSSL_INCLUDE_DIRS)
diff --git a/liblte/src/liblte_security.cc b/liblte/src/liblte_security.cc
index 7f968b8..60e38ed 100644
--- a/liblte/src/liblte_security.cc
+++ b/liblte/src/liblte_security.cc
@@ -35,8 +35,8 @@
 *******************************************************************************/
 
 #include "liblte_security.h"
-#include "polarssl/compat-1.2.h"
-#include "polarssl/aes.h"
+#include "mbedtls/aes.h"
+#include "mbedtls/md.h"
 #include "math.h"
 
 /*******************************************************************************
@@ -257,7 +257,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_asme(uint8  *ck,
         }
 
         // Derive Kasme
-        sha2_hmac(key, 32, s, 14, k_asme, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), key, 32, s, 14, k_asme);
 
         err = LIBLTE_SUCCESS;
     }
@@ -292,7 +292,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_enb(uint8  *k_asme,
         s[6] = 0x04; // Second byte of L0
 
         // Derive Kenb
-        sha2_hmac(k_asme, 32, s, 7, k_enb, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_asme, 32, s, 7, k_enb);
 
         err = LIBLTE_SUCCESS;
     }
@@ -330,7 +330,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_nas(uint8
         s[6] = 0x01; // Second byte of L1
 
         // Derive KNASenc
-        sha2_hmac(k_asme, 32, s, 7, k_nas_enc, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_asme, 32, s, 7, k_nas_enc);
 
         // Construct S for KNASint
         s[0] = 0x15; // FC
@@ -342,7 +342,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_nas(uint8
         s[6] = 0x01; // Second byte of L1
 
         // Derive KNASint
-        sha2_hmac(k_asme, 32, s, 7, k_nas_int, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_asme, 32, s, 7, k_nas_int);
 
         err = LIBLTE_SUCCESS;
     }
@@ -380,7 +380,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_rrc(uint8
         s[6] = 0x01; // Second byte of L1
 
         // Derive KRRCenc
-        sha2_hmac(k_enb, 32, s, 7, k_rrc_enc, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_enb, 32, s, 7, k_rrc_enc);
 
         // Construct S for KRRCint
         s[0] = 0x15; // FC
@@ -392,7 +392,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_rrc(uint8
         s[6] = 0x01; // Second byte of L1
 
         // Derive KRRCint
-        sha2_hmac(k_enb, 32, s, 7, k_rrc_int, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_enb, 32, s, 7, k_rrc_int);
 
         err = LIBLTE_SUCCESS;
     }
@@ -431,7 +431,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_up(uint8
         s[6] = 0x01; // Second byte of L1
 
         // Derive KUPenc
-        sha2_hmac(k_enb, 32, s, 7, k_up_enc, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_enb, 32, s, 7, k_up_enc);
 
         // Construct S for KUPint
         s[0] = 0x15; // FC
@@ -443,7 +443,7 @@ LIBLTE_ERROR_ENUM liblte_security_generate_k_up(uint8
         s[6] = 0x01; // Second byte of L1
 
         // Derive KUPint
-        sha2_hmac(k_enb, 32, s, 7, k_up_int, 0);
+        mbedtls_md_hmac(mbedtls_md_info_from_type(MBEDTLS_MD_SHA256), k_enb, 32, s, 7, k_up_int);
 
         err = LIBLTE_SUCCESS;
     }
@@ -470,7 +470,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8  *key,
 {
     LIBLTE_ERROR_ENUM err = LIBLTE_ERROR_INVALID_INPUTS;
     uint8             M[msg_len+8+16];
-    aes_context       ctx;
+    mbedtls_aes_context ctx;
     uint32            i;
     uint32            j;
     uint32            n;
@@ -487,8 +487,8 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8  *key,
        mac != NULL)
     {
         // Subkey L generation
-        aes_setkey_enc(&ctx, key, 128);
-        aes_crypt_ecb(&ctx, AES_ENCRYPT, const_zero, L);
+        mbedtls_aes_setkey_enc(&ctx, key, 128);
+        mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, const_zero, L);
 
         // Subkey K1 generation
         for(i=0; i<15; i++)
@@ -536,7 +536,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8  *key,
             {
                 tmp[j] = T[j] ^ M[i*16 + j];
             }
-            aes_crypt_ecb(&ctx, AES_ENCRYPT, tmp, T);
+            mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, tmp, T);
         }
         pad_bits = ((msg_len*8) + 64) % 128;
         if(pad_bits == 0)
@@ -545,7 +545,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8  *key,
             {
                 tmp[j] = T[j] ^ K1[j] ^ M[i*16 + j];
             }
-            aes_crypt_ecb(&ctx, AES_ENCRYPT, tmp, T);
+            mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, tmp, T);
         }else{
             pad_bits                       = (128 - pad_bits) - 1;
             M[i*16 + (15 - (pad_bits/8))] |= 0x1 << (pad_bits % 8);
@@ -553,7 +553,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8  *key,
             {
                 tmp[j] = T[j] ^ K2[j] ^ M[i*16 + j];
             }
-            aes_crypt_ecb(&ctx, AES_ENCRYPT, tmp, T);
+            mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, tmp, T);
         }
 
         for(i=0; i<4; i++)
@@ -575,7 +575,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8                 *key,
 {
     LIBLTE_ERROR_ENUM err = LIBLTE_ERROR_INVALID_INPUTS;
     uint8             M[msg->N_bits*8+8+16];
-    aes_context       ctx;
+    mbedtls_aes_context ctx;
     uint32            i;
     uint32            j;
     uint32            n;
@@ -592,8 +592,8 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8                 *key,
        mac != NULL)
     {
         // Subkey L generation
-        aes_setkey_enc(&ctx, key, 128);
-        aes_crypt_ecb(&ctx, AES_ENCRYPT, const_zero, L);
+        mbedtls_aes_setkey_enc(&ctx, key, 128);
+        mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, const_zero, L);
 
         // Subkey K1 generation
         for(i=0; i<15; i++)
@@ -653,7 +653,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8                 *key,
             {
                 tmp[j] = T[j] ^ M[i*16 + j];
             }
-            aes_crypt_ecb(&ctx, AES_ENCRYPT, tmp, T);
+            mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, tmp, T);
         }
         pad_bits = (msg->N_bits + 64) % 128;
         if(pad_bits == 0)
@@ -662,7 +662,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8                 *key,
             {
                 tmp[j] = T[j] ^ K1[j] ^ M[i*16 + j];
             }
-            aes_crypt_ecb(&ctx, AES_ENCRYPT, tmp, T);
+            mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, tmp, T);
         }else{
             pad_bits                       = (128 - pad_bits) - 1;
             M[i*16 + (15 - (pad_bits/8))] |= 0x1 << (pad_bits % 8);
@@ -670,7 +670,7 @@ LIBLTE_ERROR_ENUM liblte_security_128_eia2(uint8                 *key,
             {
                 tmp[j] = T[j] ^ K2[j] ^ M[i*16 + j];
             }
-            aes_crypt_ecb(&ctx, AES_ENCRYPT, tmp, T);
+            mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, tmp, T);
         }
 
         for(i=0; i<4; i++)
-- 
2.7.4

